(function executeRule(current, previous /*null when async*/) {

    //Update the values of the following attributes to your specific API base URL, login credentials, and tenant/domain names
	var NetBrainPrefix = 'https://XXX/ServicesAPI/API/';
    var Username = 'XXX';
    var Password = 'XXX';
    var TenantName = 'Initial Tenant';
    var DomainName = 'S&S integration lab';
    var deviceName = 'DMHQ-3750-1';
    var StubName = 'SiteMap';

    //Get login token
    function requestloginApiToken(usr, pwd) {
        var authdata = {
            username: usr,
            password: pwd
        };
        var r = new sn_ws.RESTMessageV2();
        r.setEndpoint(NetBrainPrefix + 'V1/Session');
        r.setHttpMethod('POST');
        r.setRequestBody(JSON.stringify(authdata));
	    //r.setMIDServer('MID Server1 prod');
        r.setHttpTimeout(10000);
        try {
            var response = r.execute();
            var responseBody = response.getBody();
            //gs.log(responseBody);
            //gs.log(response.getStatusCode());
            var obj = new JSON.parse(responseBody);
            var token = obj.token;
            return token;
        } catch (ex) {
            return "ERROR : requestloginApiToken";
        }
    }

    //Get working tenant ID from the user accessible tenant list
    function getTenantID(tenantName, tokenStr) {
        var r = new sn_ws.RESTMessageV2();
        r.setEndpoint(NetBrainPrefix + 'V1/CMDB/Tenants');
        r.setHttpMethod('GET');
	    //r.setMIDServer('MID Server1 prod');
        r.setRequestHeader('Token', tokenStr);
        r.setHttpTimeout(10000);
        try {
            var response = r.execute();
            var responseBody = response.getBody();
            var obj = new JSON.parse(responseBody);
            for (var i=0; i < obj.tenants.length; i++) {
                if (obj.tenants[i].tenantName == tenantName) {
                    return obj.tenants[i].tenantId;
                } else {
                    return "You cannot access the specified tenant.";
                }
            }
        } catch (ex) {
            return "ERROR: getTenantID";
        }
    }

    //Get working domain ID from the user accessible domain list of a specific accessible tenant
    function getDomainID(domainName, tenantId, tokenStr) {
        var r = new sn_ws.RESTMessageV2();
        r.setEndpoint(NetBrainPrefix + 'V1/CMDB/Domains');
        r.setHttpMethod('GET');
	    //r.setMIDServer('MID Server1 prod');
        r.setRequestHeader('Token', tokenStr);
        r.setRequestHeader('tenantId', tenantId);
        r.setHttpTimeout(10000);
        try {
            var response = r.execute();
            var responseBody = response.getBody();
            var obj = new JSON.parse(responseBody);
            for (var i=0; i < obj.domains.length; i++) {
                if (obj.domains[i].domainName == domainName) {
                    return obj.domains[i].domainId;
                }
            }
            return "You cannot access the specified domain.";
        } catch (ex) {
            return "ERROR: getDomainID";
        }
    }

    //Logout token
    function logoutApiToken(tokenStr) {
        var r = new sn_ws.RESTMessageV2();
        r.setEndpoint(NetBrainPrefix + 'V1/Session');
        r.setHttpMethod('DELETE');
	    //r.setMIDServer('MID Server1 prod');
        r.setRequestHeader('Token', tokenStr);
        r.setHttpTimeout(10000);
        try {
            var response = r.execute();
            var responseBody = response.getBody();
            var obj = new JSON.parse(responseBody);
            var token = obj.token;
            return token;
        } catch (ex) {
            return "ERROR : logoutApiToken";
        }
    }
	
    //Trigger NetBrain to draw path map
	function drawPathTrigger(serviceLoginToken, tenant_id, domain_id, nbuser, StubName, deviceName) {
        var r = new sn_ws.RESTMessageV2();
        r.setEndpoint(NetBrainPrefix + 'V1/Triggers/Run');
        r.setHttpMethod('POST');
	    //r.setMIDServer('MID Server1 prod');
        var data = {
            domain_setting: {
                tenant_id: tenant_id,
                domain_id: domain_id
            },
            basic_setting: {
                triggered_by: 'ServiceNow',
                user: nbuser,
                device: deviceName,
                stub_name: StubName
            }
        };
        r.setRequestHeader('Token', serviceLoginToken);
        r.setRequestHeader('Content-Type', 'application/json');
        r.setRequestBody(JSON.stringify(data));
        r.setHttpTimeout(10000);
        try {
            var response = r.execute();
            var responseBody = response.getBody();
            var responseStatusCode = response.getStatusCode();
            gs.log(responseBody)
            var obj = new JSON.parse(responseBody);
            return obj.mapUrl;
        } catch (ex) {
            gs.log(ex.getMessage());
            gs.log('Netbrain drawPathTrigger()');
        }
    }
	
    //Set value to ServiceNow field
	function setRrdValue(grName, srcPrName, srcPrV, dstPrName, dstPrValue) {
        var gr = new GlideRecord(grName);
        gr.addQuery(srcPrName, srcPrV);
        gr.query();
        if (gr.next()) {
            gr.setValue(dstPrName, dstPrValue);
            gr.update();
        }
    }

	//Get token
    token = requestloginApiToken(Username, Password);
    gs.log("Token: " + token);
    //Get tenant ID
    tenantId = getTenantID(TenantName, token);
    //Get domain ID
    domainId = getDomainID(DomainName, tenantId, token);
    gs.log("Tenant ID: " + tenantId + "\n" + "Domain ID: " + domainId);
    //Get deviceName from ServiceNow "ci" field
    //deviceName = current.getDisplayValue('ci');
    

    //Update the 5th parameter to the specific API Stub you defined in NetBrain. Get NetBrain path map URL from NetBrain Trigger API response
    netbrainurl = drawPathTrigger(token, tenantId, domainId, Username, StubName, deviceName);
	//Set NetBrain path map URL to "u_netbrainmapurl" field
    //if (netbrainurl.length > 0) {
		//gs.log('NetBrain Map Url ' + netbrainurl);
        //setRrdValue('incident', 'sys_id', current.getValue('sys_id'), 'u_netbrain_map_url', netbrainurl);       
    //}
    //logoutApiToken(token);
	
})(current, previous);